import cv2 library
import Twilio library
set faceCascade = {path_to_cascade_xml}
set recogniser = {LBPH_recognizer_cv2}
set trainedFile = {path_to_trainer_yaml} 
set stream 	= videoFeed from {device}
set stream{height} = height
set stream{width} = width
set names = names[]
set lowThreshold = {low_threshold}
while True:
	set gray = stream{convert_to_greyscale}
	set faces = detect faces in gray with {parameters}
	for each face in faces:
		{draw_boundingBox} around face
		use recogniser to identify faces
		set (ID, confidence) = {get_prediction} from recogniser
		if confidence > 40:
			set id = names[ID]
		else:
			set id = 'Unknown'
			{send_SMS} with Twilio
		{write_text} of {(confidence, ID)} around each boundingBox
release videoFeed from {device}

import cv2
import numpy as np
import os 
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read('Trainer/trainer.yml')
cascadePath = "../Cascades/haarcascade_frontalface_default.xml"
faceCascade = cv2.CascadeClassifier(cascadePath);
font = cv2.FONT_HERSHEY_SIMPLEX
#iniciate id counter
id = 0
# names related to ids: example ==> Marcelo: id=1,  etc
names = ['None','Dylan','Angela','Aoife'] 
# Initialize and start realtime video capture
cam = cv2.VideoCapture(0)
cam.set(3, 640) # set video widht
cam.set(4, 480) # set video height
# Define min window size to be recognized as a face
minW = 0.1*cam.get(3)
minH = 0.1*cam.get(4)
while True:
    ret, img =cam.read()
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    
    faces = faceCascade.detectMultiScale( 
        gray,
        scaleFactor = 1.2,
        minNeighbors = 5,
        minSize = (int(minW), int(minH)),
       )
    for(x,y,w,h) in faces:
        cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)
        id, confidence = recognizer.predict(gray[y:y+h,x:x+w])
        # Check if confidence is less them 100 ==> "0" is perfect match 
        if (confidence < 100):
            id = names[id]
            confidence = "  {0}%".format(round(100 - confidence))
        else:
            id = "unknown"
            confidence = "  {0}%".format(round(100 - confidence))
        
        cv2.putText(img, str(id), (x+5,y-5), font, 1, (255,255,255), 2)
        cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)  
    
    cv2.imshow('camera',img) 
    k = cv2.waitKey(10) & 0xff # Press 'ESC' for exiting video
    if k == 27:
        cv2.imwrite('blabla.jpg', img)
        break
# Do a bit of cleanup
print("\n [INFO] Exiting Program and cleanup stuff")
cam.release()
cv2.destroyAllWindows()